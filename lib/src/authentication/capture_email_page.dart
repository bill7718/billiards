import 'package:billiards/billiards_theme.dart';
import 'package:billiards/journey.dart';
import 'package:billiards/widgets.dart';
import 'package:flutter/material.dart';
import 'package:email_validator/email_validator.dart';

///
/// The first page in the register journey
///
/// It enables a user to record their email address. This is passed to the
/// rest of the journey for processing
///
class CaptureEmailPage extends StatelessWidget {

  static const String titleText = 'Register as a new User';
  static const String formTitleText = 'Register';

  static const String emailLabel = 'Email';
  static const String emailHelp =
      'Please provide an email. You will use this to log in the system.';
  static const String emailError = 'Please enter a valid email address.';

  static const String nextButtonText = 'Next';
  static const String backButtonText = 'Back';

  final CaptureEmailInputState inputState;

  /// Handles the events generated by this page
  final PageEventHandler<CaptureEmailOutputState> handler;

  const CaptureEmailPage(
      {Key? key, required this.inputState, required this.handler})
      : super(key: key);

  @override
  Widget build(BuildContext context) {
    try {
      final formTheme = BilliardFormTheme.get(context);

      final formKey = GlobalKey();
      var email = '';
      return Scaffold(
        appBar: UnauthenticatedInJourneyAppBar(
            title: titleText,
            home: () {
              handler.handleEvent(Navigator.of(context),
                  CaptureEmailOutputState(event: DefaultEvent.home));
            }),
        body: Container(
            margin: formTheme.margin,
            child: Form(
                key: formKey,
                child: Column(
                  mainAxisAlignment: MainAxisAlignment.start,
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    const Center(child: Heading(text: formTitleText)),

                    FormRow(
                        content: ErrorMessage(
                          text: inputState.error,
                        )),
                    FormRow(
                        content: BilliardTextField(
                          label: emailLabel,
                          help: emailHelp,
                          initialValue: inputState.email,
                          valueBinder: (v) {
                            email = v;
                          },
                          validator: (v) {
                            final bool isValid = EmailValidator.validate(
                                v ?? '');
                            if (!isValid) {
                              return emailError;
                            }
                            return null;
                          },
                        )),
                    SizedBox(
                        height: Theme
                            .of(context)
                            .extension<BilliardsTheme>()
                            ?.blankLineHeight ??
                            0),
                    Row(
                      mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                      children: [
                        TextButton(
                          child: const Text(backButtonText),
                          onPressed: () {
                            final nav = Navigator.of(context);
                            handler.handleEvent(
                                nav,
                                CaptureEmailOutputState(
                                    event: DefaultEvent.back));
                          },
                        ),
                        TextButton(
                          child: const Text(nextButtonText),
                          onPressed: () {
                            final state = formKey.currentState as FormState;
                            if (state.validate()) {
                              final nav = Navigator.of(context);
                              handler.handleEvent(
                                  nav,
                                  CaptureEmailOutputState(
                                      event: DefaultEvent.next, email: email));
                            }
                          },
                        )
                      ],
                    )
                  ],
                ))),
      );
    } catch (ex, st) {
      final nav = Navigator.of(context);
      handler.handleException(nav, ex, st: st);
      return Container();
    }
  }
}

///
/// Input into the [CaptureEmailPage] screen
///
class CaptureEmailInputState {
  final String? _email;
  final String? error;
  CaptureEmailInputState(this._email, {this.error});

  String? get email => _email;
}

///
/// Output from the [CaptureEmailPage] screen
///
class CaptureEmailOutputState {
  final String? email;
  final DefaultEvent event;
  CaptureEmailOutputState({required this.event, this.email});
}
